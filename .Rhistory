'violation description', 'critical flag', 'score', 'grade',
'grade date', 'record date', 'inspection type', 'latitude',
'longitude', 'community board', 'council district', 'census tract',
'bin', 'bbl', 'nta', 'month')
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, format = '%m/%d/%Y'))
raw.df$inspection.date[400300]
raw.df <- raw.df %>% mutate(month = month(inspection.date))
new_grade <- raw.df %>% select(., grade, score)
generator <- function (y) {
ifelse(y >= 0 & y < 14, return ('A'),
ifelse(y >= 14 & y < 28, return ('B'), return('C')))
}
new_grade <- new_grade %>% mutate(grade = gsub(NA, generator(score), grade, fixed = T))
raw.df <- raw.df %>% mutate(grade = new_grade$grade)
library(tidyverse)
library(lubridate)
raw.df <- readr::read_csv("/Users/johnlu/Desktop/Data_Visualization_Lab/data.csv")
colnames(raw.df) <- c('camis', 'dba', 'boro', 'building', 'street', 'zipcode', 'phone',
'cuisine', 'inspection.date', 'action', 'violation code',
'violation description', 'critical flag', 'score', 'grade',
'grade date', 'record date', 'inspection type', 'latitude',
'longitude', 'community board', 'council district', 'census tract',
'bin', 'bbl', 'nta', 'month')
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, format = '%m/%d/%Y'))
raw.df$inspection.date[400300]
raw.df <- raw.df %>% mutate(month = month(inspection.date))
new_grade <- raw.df %>% select(., grade, score)
generator <- function (y) {
ifelse(y >= 0 & y < 14, return ('A'),
ifelse(y >= 14 & y < 28, return ('B'), return('C')))
}
new_grade <- new_grade %>% mutate(grade = gsub(NA, generator(score), grade, fixed = T))
new_grade <- raw.df %>% select(., grade, score)
new_grade <- raw.df %>% select(., grade, score)
generator <- function (y) {
ifelse(y >= 0 & y < 14, return ('A'),
ifelse(y >= 14 & y < 28, return ('B'), return('C')))
}
new_grade <- new_grade %>% mutate(grade = gsub(NA, generator(iter(score)), grade, fixed = T))
new_grade <- new_grade %>% mutate(grade = sapply(grade, generator(score)))
new_grade <- new_grade %>% mutate(grade = sapply(score, generator()))
new_grade <- raw.df %>% select(., grade, score)
generator <- function (y) {
ifelse(y >= 0 & y < 14, return ('A'),
ifelse(y >= 14 & y < 28, return ('B'), return('C')))
}
new_grade <- new_grade %>% mutate(grade = sapply(score, generator()))
new_grade <- new_grade %>% mutate(grade = sapply(score, generator))
raw.df <- raw.df %>% mutate(grade = new_grade$grade)
new_action <- raw.df %>% select(action)
a = 'Violations were cited in the following area(s).'
b = 'Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those
requiring immediate action were addressed.'
c = 'Establishment re-closed by DOHMH'
d = 'No violations were recorded at the time of this inspection.'
e = 'Establishment re-opened by DOHMH'
abbrev <- function(x){
if (x == a){return ('violations')}
if (x == b){return ('closed')}
if (x == c){return ('reclosed')}
if (x == d){return ('no violations')}
if (x == e){return ('reopened')}
}
new_action <- new_action %>% mutate(action = gsub(a, abbrev(a), action, fixed = T))
new_action <- new_action %>% mutate(action = gsub(b, abbrev(b), action, fixed = T))
new_action <- new_action %>% mutate(action = gsub(c, abbrev(c), action, fixed = T))
new_action <- new_action %>% mutate(action = gsub(d, abbrev(d), action, fixed = T))
new_action <- new_action %>% mutate(action = gsub(e, abbrev(e), action, fixed = T))
raw.df <- raw.df %>% mutate(action = new_action$action)
raw.df <- raw.df %>% filter(boro %in% c('Queens', 'Brooklyn', 'Bronx', 'Manhattan', 'Staten Island')
& score > 0 & !is.na(score) & inspection.date > '2000/01/01')
inspections <- raw.df %>% select(camis, boro, cuisine, inspection.date, action, score, grade, month)
inspections <- inspections %>% distinct()
g1 <- ggplot(inspections, aes(x = boro, y = grade, fill = boro)) +
geom_bar(stat = 'identity')
g1
g2 <- ggplot(inspections, aes(x = boro, fill = boro)) +
geom_bar(stat = 'count')
g2
g3 <- ggplot(inspections, aes(x = grade, fill = grade)) +
geom_bar(stat = 'count')
g3
g1 <- ggplot(inspections, aes(x = boro, y = grade, fill = boro)) +
geom_bar(stat = 'identity')
g1
g1 <- ggplot(inspections, aes(x = grade, y = boro, fill = grade)) +
geom_bar(stat = 'identity')
g1
g3 <- ggplot(inspections, aes(x = grade, fill = factor(boro))) +
geom_bar(stat = 'count')
g3
g3 <- ggplot(inspections, aes(x = grade, fill = boro)) +
geom_bar(stat = 'count')
g3
g3 <- ggplot(inspections, aes(x = grade, fill = boro)) +
geom_bar(stat = 'count')
g3
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count')
g2
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g1 <- ggplot(inspections, aes(x = grade, y = boro, fill = boro)) +
geom_bar(stat = 'identity', position = 'dodge')
g1
g1 <- ggplot(inspections, aes(x = grade, y = boro, fill = grade)) +
geom_bar(stat = 'identity', position = 'dodge')
g1
g1 <- ggplot(inspections, aes(x = boro, y = grade, fill = grade)) +
geom_bar(stat = 'identity', position = 'dodge')
g1
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g1 <- ggplot(inspections, aes(x = boro, y = grade, fill = grade)) +
geom_bar(stat = 'identity', position = 'dodge')
g1
g1 <- ggplot(inspections, aes(x = grade, y = boro, fill = boro)) +
geom_bar(stat = 'identity', position = 'dodge')
g1
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g2 <- ggplot(inspections, aes(x = grade, fill = boro)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g1 <- ggplot(inspections, aes(x = grade, y = boro, fill = camis))
g1
g1 <- ggplot(inspections, aes(x = grade, y = boro)) +
geom_bar(aes(x = grade, y = boro), stat = 'identity', position = 'dodge')
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, y = grade, fill = grade),
stat = 'identity', position = 'dodge'
)
g1
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = grade, fill = grade),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = boro),
stat = 'count', position = 'dodge'
)
g1
g2 <- ggplot(inspections, aes(x = boro, fill = grade)) +
geom_bar(stat = 'count', position = 'dodge')
g2
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = grade),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = grade),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = reorder(boro), fill = grade),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = grade),
stat = 'count', position = 'dodge'
)
g1
inspections$boro <- factor(inspections$boro, levels =
c('Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island'))
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = grade),
stat = 'count', position = 'dodge'
)
g1
inspections$boro <- factor(inspections$boro, levels =
c('Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island'))
g1 <- ggplot(inspections) +
geom_bar(
aes(x = grade, fill = boro),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = boro, fill = grade),
stat = 'count', position = 'dodge'
)
g1
g1 <- ggplot(inspections) +
geom_bar(
aes(x = grade, fill = boro),
stat = 'count', position = 'dodge'
)
g1
knitr::opts_chunk$set(echo = TRUE)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) <- tolower(names(raw.df))
raw.df <- rename(raw.df, cuisine = `cuisine description`)
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
names(raw.df) <- tolower(names(raw.df))
raw.df <- rename(raw.df, cuisine = `cuisine description`)
raw.df <- rename(raw.df, inspection.date = `inspection date`)
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, "%m/%d/%Y"))
raw.df <- raw.df %>% mutate(month=as.numeric(format(inspection.date, "%m")))
raw.df <- raw.df %>% mutate(grade = ifelse(0 < score & score < 14 , 'A',
ifelse(score < 28, 'B', 'C')))
raw.df <- mutate(raw.df, action = gsub(pattern = "Violations were cited in the following area(s).", replacement = "violations", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.", replacement = "closed", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = action, ignore.case = F))
raw.df <- filter(raw.df,
boro != 'Missing' & #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
inspection.date > '1900-01-01' & #Eliminate rows where the restaurant hasn't been inspected yet
!is.na(score) & #Eliminate rows without a score
score >= 0 #Eliminate rows with a negative score
)
raw.df <- select(raw.df, camis, boro, cuisine, inspection.date, action, score, grade, month)
inspections = unique(raw.df)
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line",position="identity") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by latest score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
inspClosByBoro = inspections %>%
group_by(boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspection = n(),
ratio = closures / inspection)
reclosedByBoro =  inspections %>%
filter(action == 'closed') %>%
group_by(camis, boro) %>%
summarize(count = n()) %>%
group_by(boro) %>%
summarize(total_closed = n(),
closed_more_than_once = sum(count>1),
ratio = closed_more_than_once / total_closed)
boroClosureRatios = left_join(inspClosByBoro, reclosedByBoro, by = 'boro') %>%
rename(inspRatio = ratio.x, recloRatio = ratio.y)
ggplot(data = boroClosureRatios, aes(x=inspRatio, y=recloRatio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
boroClosureRatios = left_join(inspClosByBoro, reclosedByBoro, by = 'boro') %>%
rename(inspRatio = ratio.x, recloRatio = ratio.y)
ggplot(data = boroClosureRatios, aes(x=inspRatio, y=recloRatio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
inspClosByCuisineBoro = inspectionsFiltered %>%
group_by(cuisine, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspections = n(),
ratio = closures / inspections)
ggplot(data=inspClosByCuisineBoro, aes(x=cuisine, y=ratio)) +
geom_bar(stat='identity', aes(fill=boro)) +
facet_grid(. ~ boro) +
labs(title='Inspection closure ratio by top 20 cuisine and borough', x='Top 20 cuisine', y='Inspection closure ratio') +
scale_y_continuous(labels = scales::percent) +
scale_fill_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.key=element_blank(), legend.position="bottom") +
coord_flip()
trendScoreMonth = inspections %>%
group_by(month, boro) %>%
summarise(avg = mean(score))
ggplot(data=trendScoreMonth, aes(x = month, y = avg)) +
geom_freqpoly(stat='identity', aes(color=boro)) +
labs(title='Average score by month and borough',
x='Month',
y='Average score') +
coord_cartesian(xlim = c(1,12), ylim = c(13,18)) +
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")) +
scale_color_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
trendClosures = inspections %>%
group_by(month, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspection = n(),
ratio = closures / inspection)
ggplot(data=trendClosures, aes(x=month, y=ratio)) +
geom_freqpoly(stat='identity', aes(color=boro)) +
labs(title='Inspection closure ratio by month and borough',
x='Month',
y='Inspection closure ratio') +
coord_cartesian(xlim = c(1,12)) +
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")) +
scale_y_continuous(limits=c(0.005,0.035),
breaks=seq(0,0.035,0.005),
labels=scales::percent) +
scale_color_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
setwd('names')
files = list.files(pattern="*.txt")
year <- as.numeric(gsub('/Users/johnlu/Desktop/names/yob', "", x, perl=TRUE))
files = list.files(pattern="*.txt")
handle_each <- function(x){
year <- as.numeric(gsub('/Users/johnlu/Desktop/names/yob', "", x, perl=TRUE))
temp <- read.csv(x, header = FALSE,  col.names = c("name","sex","number"))
temp$year <- year
return(temp)
}
myfiles = do.call(rbind, lapply(files, handle_each))
myfiles
# 4.6
# Get the files names
setwd('names')
# 4.6
# Get the files names
getwd
# 4.6
# Get the files names
getwd()
setwd('names')
files = list.files(pattern="*.txt")
handle_each <- function(x){
year <- as.numeric(gsub("[^\\d]+", "", x, perl=TRUE))
temp <- read.csv(x, header = FALSE,  col.names = c("name","sex","number"))
temp$year <- year
return(temp)
}
myfiles = do.call(rbind, lapply(files, handle_each))
ccc = myfiles[with(myfiles, name %in% c('Chris', 'Christian', 'Christopher')), ]
handle_each <- function(x){
year <- as.numeric(gsub("[^\\d]+", "", x, perl=TRUE))
temp <- read.csv(x, header = FALSE,  col.names = c("name","sex","number"))
temp$year <- year
return(temp)
}
myfiles = do.call(rbind, lapply(files, handle_each))
ccc = myfiles[with(myfiles, name %in% c('Chris', 'Christian', 'Christopher')), ]
myfiles
# 4.6
# Get the files names
setwd('names')
setwd('names')
files = list.files(pattern="*.txt")
# First apply read.csv, then rbind
handle_each <- function(x){
year <- as.numeric(gsub("[^\\d]+", "", x, perl=TRUE))
temp <- read.csv(x, header = FALSE,  col.names = c("name","sex","number"))
temp$year <- year
return(temp)
}
myfiles = do.call(rbind, lapply(files, handle_each))
ccc = myfiles[with(myfiles, name %in% c('Chris', 'Christian', 'Christopher')), ]
ccc
myfiles
setwd('names')
files = list.files(pattern="*.txt")
# 4.6
# Get the files names
getwd
# 4.6
# Get the files names
getwd()
setwd('names')
setwd('names')
getwd()
csv_filenames = list.files(path = './data/', pattern = '*.csv')
csv_filenames
fullpath <- function (x) {
return (paste0('./data/', x))
}
csv_filepaths <- sapply(csv_filenames, fullpath)
names(csv_filepaths) <- c(1:length(csv_filepaths))
csv_filepaths
getwd()
library(dplyr)
getwd()
csv_filenames = list.files(path = './data/', pattern = '*.csv')
csv_filenames
fullpath <- function (x) {
return (paste0('./data/', x))
}
csv_filepaths <- sapply(csv_filenames, fullpath)
names(csv_filepaths) <- c(1:length(csv_filepaths))
csv_filepaths
reader <- function (x) {
temp = as.data.frame(read.csv(x, stringsAsFactors = F))
return (temp)
}
all_dfs <- lapply(csv_filepaths, reader)
for (i in 1:41){
all_dfs[[i]] <- all_dfs[[i]] %>% select(START.DATE, END.DATE, OFFICE,
PURPOSE, AMOUNT)
}
library(lubridate)
clean_date_str <- function (x) {
date <- parse_date_time(x,  c('Y-m-d', 'm-d-Y' , 'm-d-y' ,
'Y/m/d' , 'm/d/Y' , 'm/d/y'))
date <- format(date, '%m/%d/%Y')
return (date)
}
for (i in 1:41){
all_dfs[[i]] <- all_dfs[[i]] %>%
mutate(START.DATE = clean_date_str(START.DATE),
END.DATE = clean_date_str(END.DATE))
}
all_dfs[[3]]
library(dplyr)
getwd()
csv_filenames = list.files(path = './data/', pattern = '*.csv')
csv_filenames
fullpath <- function (x) {
return (paste0('./data/', x))
}
csv_filepaths <- sapply(csv_filenames, fullpath)
names(csv_filepaths) <- c(1:length(csv_filepaths))
csv_filepaths
reader <- function (x) {
temp = as.data.frame(read.csv(x, stringsAsFactors = F))
return (temp)
}
all_dfs <- lapply(csv_filepaths, reader)
for (i in 1:41){
all_dfs[[i]] <- all_dfs[[i]] %>% select(START.DATE, END.DATE, OFFICE,
PURPOSE, AMOUNT)
}
install.packages("shiny")
shiny::runApp('Desktop/shinyTutorial/shinyDemo')
getwd
getwd()
shiny::runApp('Desktop/R_Shiny_Project')
runApp('Desktop/R_Shiny_Project')
Y
runApp('Desktop/R_Shiny_Project')
